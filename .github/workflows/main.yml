#=================================================
#   Description: Build G-DOCK FROM LEAN'S LEDE
#   Author: //
#=================================================

name: Build firmware

on:
  release:
    types: published
  push:
    branches:
      - master
  # schedule:
  #   - cron: 0 8 * * 5
  watch:
    types: started

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    
    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean

    - name: Clone source code
      run: |
        git clone https://github.com/coolsnowwolf/lede lede
        
    # - name: Clone passwall code
    #   run: |
    #     cd lede/package
    #     git clone https://github.com/Lienol/openwrt-package.git

    # - name: Update feeds
    #   run: |
    #     cd lede
    #     ./scripts/feeds update -a
    #     ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        cd lede
        cp -f ../custom.config .config
        make defconfig

    # - name: Download package
    #   run: |
    #     cd lede
    #     make download -j$(nproc)
    #     find dl -size -1024c -exec ls -l {} \;
    #     find dl -size -1024c -exec rm -f {} \;

    # - name: Compile firmware
    #   id: compile
    #   run: |
    #     cd lede
    #     echo -e "$(nproc) thread compile"
    #     make -j$(nproc) V=s

    - name: Copy custom configuration
      run: |
        cd lede
        make -p ./bin/targets/ipq40xx/generic
        cp .config ./bin/targets/ipq40xx/generic/custom.config

    - name: Upload artifact
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: Firmware-$(date +%Y%m%d%H%k%M)
        path: ./lede/bin
